{
  "version": 3,
  "sources": ["../src/handler.ts", "../src/game.ts"],
  "sourcesContent": ["import { Game } from './game';\r\n\r\nconst game = new Game();\r\n\r\nexport const handler = async (event: any) => {\r\n    game.spin(event.bets);\r\n    let one=(game.matrix);\r\n    let two=game.check();\r\n    let output={\r\n        \"matrix\":one,\r\n        \"winnings\":two\r\n    }\r\n    return output;\r\n};\r\n", "export class Game{\r\n    \r\n symbols = ['!', '@', '#', '$', '%', '^', '&', '*'];\r\n currentBalance: number = 0;\r\n spinCount: number = 0;\r\n currentUser: string | null = null;\r\n matrix: string[][] = [];\r\n bet:number[]=[];\r\n\r\ngetRandomSymbol(): string {\r\n    const randomIndex = Math.floor(Math.random() * this.symbols.length);\r\n    return this.symbols[randomIndex];\r\n}\r\n\r\ngenerateMatrix(): string[][] {\r\n    this.matrix= [];\r\n    for (let i = 0; i < 3; i++) {\r\n        const row: string[] = [];\r\n        for (let j = 0; j < 3; j++) {\r\n            row.push(this.getRandomSymbol());\r\n        }\r\n        this.matrix.push(row);\r\n    }\r\n    return this.matrix;\r\n}\r\n\r\n spin(bets: number[]): void {\r\n    this.bet=bets;\r\n    let spinCount=0;\r\n    spinCount++;\r\n    const matrix = this.generateMatrix();\r\n\r\n    if (bets.filter(bet => bet > 0).length === 1 && this.isPrime(spinCount)) {\r\n        const rowIndex = bets.findIndex(bet => bet > 0);\r\n        matrix[rowIndex] = [this.getRandomSymbol(), this.getRandomSymbol(), this.getRandomSymbol()].map(symbol => symbol =this.symbols[0]);\r\n    } else if (bets.filter(bet => bet > 0).length === 2 && spinCount % 2 === 0) {\r\n        for (let i = 0; i < 3; i++) {\r\n            matrix[i] = [this.symbols[0], this.symbols[0], this.symbols[0]];\r\n        }\r\n    } else if (bets.filter(bet => bet > 0).length === 3 && spinCount % 3 === 0) {\r\n        for (let i = 0; i < 3; i++) {\r\n            matrix[i] = [this.symbols[0], this.symbols[0], this.symbols[0]];\r\n        }\r\n    }\r\n\r\n}\r\ncheck(){\r\n    const rowWins = this.checkRowWin(this.matrix);\r\n    const winnings = this.calculateWinnings(this.bet, rowWins);\r\n    return winnings;\r\n}  \r\n\r\n checkRowWin(matrix: string[][]): boolean[] {\r\n    const rowWins: boolean[] = [false, false, false];\r\n    for (let i = 0; i < 3; i++) {\r\n        if (matrix[i][0] === matrix[i][1] && matrix[i][1] === matrix[i][2]) {\r\n            rowWins[i] = true;\r\n        }\r\n    }\r\n    return rowWins;\r\n}\r\n calculateWinnings(bets: number[], rowWins: boolean[]): number {\r\n    let winnings = 0;\r\n    let rowsWon = rowWins.filter(win => win).length;\r\n\r\n    if (rowsWon >= 2 && bets.filter(bet => bet > 0).length === 2) {\r\n        winnings += 20; // Bonus for winning on 2 rows when betting on 2 rows\r\n    }\r\n    if (rowsWon === 3 && bets.filter(bet => bet > 0).length === 3) {\r\n        winnings += 50; // Bonus for winning on all 3 rows when betting on all 3 rows\r\n    }\r\n\r\n    for (let i = 0; i < 3; i++) {\r\n        if (rowWins[i]) {\r\n            winnings += bets[i]; \r\n        }\r\n    }\r\n\r\n    return winnings;\r\n}\r\nisPrime(num: number): boolean {\r\n    if (num <= 1) return false;\r\n    if (num <= 3) return true;\r\n    if (num % 2 === 0 || num % 3 === 0) return false;\r\n    for (let i = 5; i * i <= num; i += 6) {\r\n        if (num % i === 0 || num % (i + 2) === 0) return false;\r\n    }\r\n    return true;\r\n}\r\n\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
